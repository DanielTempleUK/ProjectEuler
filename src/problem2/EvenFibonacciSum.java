package problem2;

import java.util.ArrayList;
import java.util.List;

/**
 * Solution to problem 2
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 			1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class EvenFibonacciSum {

	public static void main(final String[] args) {
		final long startTime = System.currentTimeMillis();

		System.out.println("The answer is: " + calculateSolution());

		final long endTime = System.currentTimeMillis();
		System.out.println("The solution took: " + (endTime - startTime) + " milliseconds");
	}

	private static long calculateSolution() {
		final List<Long> fibonacci = EvenFibonacciSum.getFibonacciSequence();

		long total = 0L;

		//Start from index 1 (Fibonacci number is 2) the repeating pattern: EVEN; ODD; ODD; can be observed,
		//So total up each 3rd indexed number starting with index 1.
		for (int i = 1; i < fibonacci.size(); i += 3) {
			total += fibonacci.get(i);
		}

		return total;
	}

	private static List<Long> getFibonacciSequence() {
		final List<Long> fibonacci = new ArrayList<Long>();

		long i = 1L;
		long j = 2L;
		long k = 0L;

		fibonacci.add(i);
		fibonacci.add(j);

		do {
			k = i + j;
			fibonacci.add(k);

			i = j;
			j = k;
		}
		while( k < 4000000 );

		return fibonacci;
	}
}