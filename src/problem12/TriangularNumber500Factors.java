package problem12;


/**
 * Solution to Problem 12
 * 
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class TriangularNumber500Factors {

	public static void main(final String[] args) {
		final long startTime = System.currentTimeMillis();

		System.out.println("The answer is: " + calculateSolution());

		final long endTime = System.currentTimeMillis();
		System.out.println("The solution took: " + (endTime - startTime) + " milliseconds");
	}

	private static long calculateSolution() {
		long triangleNumber = 0L;

		for( long i = 1; i > 0; i++ ) {
			triangleNumber = triangleNumber + i;

			int numberOfDivisors = 2;
			int factor = 2;

			//Neat way of benefiting from the sqrt(n) limit on factors without having to calculate the sqrt.
			//This saved around 20% execution time in this solution compared to calculating the square root.
			//Thanks to :
			// http://stackoverflow.com/questions/10139001/what-is-the-fastest-way-in-java-to-get-the-amount-of-factors-a-number-has
			while( factor * factor <= triangleNumber) {
				if(triangleNumber % factor == 0) {
					numberOfDivisors += 2;
				}
				factor++;
			}

			if(numberOfDivisors > 500) {
				return triangleNumber;
			}
		}

		return 0;
	}
}