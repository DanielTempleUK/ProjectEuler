package problem61;

import java.util.ArrayList;
import java.util.List;

import utilities.NumberChecker;

/**
 * Solution to problem 61:
 * 
 * 
 * Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all
 * figurate (polygonal) numbers and are generated by the following formulae:
 * 
 * Triangle	 		P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 * Square	 		P4,n=n2	 			1, 4, 9, 16, 25, ...
 * Pentagonal	 	P5,n=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
 * Hexagonal	 	P6,n=n(2n-1)	 	1, 6, 15, 28, 45, ...
 * Heptagonal	 	P7,n=n(5n-3)/2	 	1, 7, 18, 34, 55, ...
 * Octagonal	 	P8,n=n(3n-2)	 	1, 8, 21, 40, 65, ...
 * 
 * 
 * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
 * 	1.	The set is cyclic, in that the last two digits of each number is the first two digits
 * 		of the next number (including the last number with the first).
 *	2.	Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882),
 *		is represented by a different number in the set.
 * 	3.	This is the only set of 4-digit numbers with this property.
 * 
 * Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
 * triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
 */
public class CyclicalFigurateNumbers {

	private static final List<Long> triangularNumbers = new ArrayList<Long>();
	private static final List<Long> squareNumbers = new ArrayList<Long>();
	private static final List<Long> pentagonalNumbers = new ArrayList<Long>();
	private static final List<Long> hexagonalNumbers = new ArrayList<Long>();
	private static final List<Long> heptagonalNumbers = new ArrayList<Long>();
	private static final List<Long> octagonalNumbers = new ArrayList<Long>();

	private static final List<List<Long>> listArray = new ArrayList<List<Long>>();

	static {
		listArray.add(triangularNumbers);
		listArray.add(squareNumbers);
		listArray.add(pentagonalNumbers);
		listArray.add(hexagonalNumbers);
		listArray.add(heptagonalNumbers);
		listArray.add(octagonalNumbers);
	};

	public static void main(final String[] args) {
		final long startTime = System.currentTimeMillis();

		System.out.println("The answer is: " + calculateSolution());

		final long endTime = System.currentTimeMillis();
		System.out.println("The solution took: " + (endTime - startTime) + " milliseconds");
	}

	private static long calculateSolution() {

		for (long i = 1000; i < 10000; i++) {
			if( NumberChecker.isTriangleNumber(i) ) {
				triangularNumbers.add(i);
			}
			if( NumberChecker.isSquareNumber(i) ) {
				squareNumbers.add(i);
			}
			if( NumberChecker.isPentagonalNumber(i) ) {
				pentagonalNumbers.add(i);
			}
			if( NumberChecker.isHexagonalNumber(i) ) {
				hexagonalNumbers.add(i);
			}
			if( NumberChecker.isHeptagonalNumber(i) ) {
				heptagonalNumbers.add(i);
			}
			if( NumberChecker.isOctagonalNumber(i) ) {
				octagonalNumbers.add(i);
			}
		}
		long solution = findSolutionsWithListsInThisOrder(0, 1, 2, 3, 4, 5);

		final int[][] indicesArray = generatePermutationsForListOfListIndices();
		int i = 0;
		while( solution == 0 ) {
			i++;
			final int[] indices = indicesArray[i];
			solution = findSolutionsWithListsInThisOrder( indices[0], indices[1], indices[2], indices[3], indices[4], indices[5] );
		}

		return solution;
	}

	private static final int[][] generatePermutationsForListOfListIndices() {
		final int[][] permutations = new int[720][6];

		int i = 0;
		for (int a = 0; a < 6; a++) {
			for (int b = 0; b < 6; b++) {
				for (int c = 0; c < 6; c++) {
					for (int d = 0; d < 6; d++) {
						for (int e = 0; e < 6; e++) {
							for (int f = 0; f < 6; f++) {
								if( a!=b && a!=c && a!=d && a!=e && a!=f &&
										b!=c && b!=d && b!=e && b!=f &&
										c!=d && c!=e && c!=f &&
										d!=e && d!=f &&
										e!=f ) {
									permutations[i] = new int[]{a,b,c,d,e,f};
									i++;
								}
							}
						}
					}
				}
			}
		}

		return permutations;
	}


	private static final long findSolutionsWithListsInThisOrder(
			final int index1, final int index2, final int index3, final int index4, final int index5, final int index6 ) {

		for (final Long triangularNumber : listArray.get(index1) ) {

			final String triangularNumberString = "" + triangularNumber;
			final String triangularNumberSuffix = triangularNumberString.substring(2);
			final List<Long> squareNumbersWithPrefix = getAllNumbersWithPrefix(listArray.get(index2), triangularNumberSuffix);

			for (final Long squareNumber : squareNumbersWithPrefix ) {

				final String squareNumberString = "" + squareNumber;
				final String squareNumberSuffix = squareNumberString.substring(2);
				final List<Long> pentagonalNumbersWithPrefix = getAllNumbersWithPrefix(listArray.get(index3), squareNumberSuffix);

				for (final Long pentagonalNumber : pentagonalNumbersWithPrefix ) {

					final String pentagonalNumberString = "" + pentagonalNumber;
					final String pentagonalNumberSuffix = pentagonalNumberString.substring(2);
					final List<Long> hexagonalNumbersWithPrefix = getAllNumbersWithPrefix(listArray.get(index4), pentagonalNumberSuffix);

					for (final Long hexagonalNumber : hexagonalNumbersWithPrefix ) {

						final String hexagonalNumberString = "" + hexagonalNumber;
						final String hexagonalNumberSuffix = hexagonalNumberString.substring(2);
						final List<Long> heptagonalNumbersWithPrefix = getAllNumbersWithPrefix(listArray.get(index5), hexagonalNumberSuffix);

						for (final Long heptagonalNumber : heptagonalNumbersWithPrefix ) {

							final String heptagonalNumberString = "" + heptagonalNumber;
							final String heptagonalNumberSuffix = heptagonalNumberString.substring(2);
							final List<Long> octagonalNumbersWithPrefix = getAllNumbersWithPrefix(listArray.get(index6), heptagonalNumberSuffix);

							for (final Long octagonalNumber : octagonalNumbersWithPrefix ) {
								final String octagonalNumberString = "" + octagonalNumber;
								final String octagonalNumberSuffix = octagonalNumberString.substring(2);
								if( triangularNumberString.startsWith(octagonalNumberSuffix) ) {
									System.out.println("" + triangularNumber + " " + squareNumber + " " + pentagonalNumber +
											" " + hexagonalNumber + " " + heptagonalNumber + " " + octagonalNumber);
									return triangularNumber + squareNumber + pentagonalNumber + hexagonalNumber + heptagonalNumber + octagonalNumber;
								}

							}
						}
					}
				}
			}
		}

		return 0L;
	}

	private static List<Long> getAllNumbersWithPrefix( final List<Long> numbers, final String prefix ) {
		final List<Long> numbersToReturn = new ArrayList<Long>();
		for (final Long number : numbers) {
			final String numberString = "" + number;
			if( numberString.startsWith(prefix) ) {
				numbersToReturn.add(number);
			}
		}
		return numbersToReturn;
	}
}